.PHONY: default clean cleanall

default: build

cmd_pfx := $(if $(verbose),,@)

# identify directory with baga files
baga_dir := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))
$(and $(verbose),$(info baga dir: $(baga_dir)))

# auto-detect user and host names
ifeq ($(OS),Windows_NT)
user := $(USERNAME)
host := $(USERDOMAIN)
else
user := $(USER)
host := $(shell uname -n)
endif

# identify the workspace file to use
ws ?= $(or $(workspace),$(wildcard ./baga-workspace-$(user)@$(host).mk),$(wildcard ./baga-workspace.mk),$(wildcard ../baga-workspace-$(user)@$(host).mk),$(wildcard ../baga-workspace.mk),$(wildcard ../../baga-workspace-$(user)@$(host).mk),$(wildcard ../../baga-workspace.mk),$(wildcard ../../../baga-workspace-$(user)@$(host).mk),$(wildcard ../../../baga-workspace.mk))
$(and $(verbose),$(info workspace file: $(ws)))

ifeq ($(ws),)
ws_dir := ./
ws := $(baga_dir)/default-workspace.mk
else
ws_dir := $(abspath $(dir $(ws)))
endif
$(and $(verbose),$(info workspace dir: $(ws_dir)))

crt_from_ws_dir := $(patsubst $(abspath $(ws_dir))/%,%,$(abspath .))
$(and $(verbose),$(info crt_from_ws_dir: $(crt_from_ws_dir)))

# load the workspace
b := $(baga_dir)
w := $(ws_dir)
include $(ws)
tmp_root ?= _tmp
out_root ?= _out

# determine builders
bld ?= $(default_builders)
bld_path_list := $(sort $(foreach b,$(bld),$(or $(firstword $(wildcard $b $b.mk $(BAGA_BUILDER_DIR)/$b.mk $(baga_dir)/bld/$b.mk)),$(error missing builder: $b))))

$(and $(verbose),$(info BAGA_BUILDER_DIR: $(BAGA_BUILDER_DIR)))
$(and $(verbose),$(info builder path list: $(bld_path_list)))

# load dependency files
define set_dep

dep[$1$2] += $1$3

endef

define process_dep

$(and $(verbose),$(info process_dep: $1,$2,$3))
$(eval $(call set_dep,$1,$2,$3))
$(and $(verbose),$(info $(call set_dep,$1,$2,$3)))

endef

define process_dep_file

dep :=
$(eval include $1)
$(and $(verbose),$(info deps from $1: $(dep)))
$(eval $(foreach d,$(dep),$(call process_dep,$(patsubst ./%,%,$(dir $1)),$(firstword $(subst :, ,$d)).baga,$(lastword $(subst :, ,$d)).baga)))

endef

$(foreach f,$(wildcard *.baga_dep */*.baga_dep */*/*.baga_dep),$(eval $(call process_dep_file,$f)))


# determine projects to process
ifeq ($(prj),)
prj_path_list := $(or $(default_prj_path_list),$(wildcard *.baga */*.baga */*/*.baga))
else
prj_path_list := $(patsubst %,%.baga,$(prj))
endif
prj_path_list := $(sort $(prj_path_list))
$(and $(verbose),$(info project path list: $(prj_path_list)))

# determine configurations to process
cfg_list := $(or $(cfg),$(default_configs),debug release)
cfg_list := $(sort $(cfg_list))
$(and $(verbose),$(info config list: $(cfg_list)))

define fake_dep_targets

.PHONY: build--$1--$2--$3 clean--$1--$2--$3
build--$1--$2--$3: ;
clean--$1--$2--$3: ;

endef

# 1:prj, 2:config, 3:builder
define build_project

.PHONY: build--$1--$2--$3 clean--$1--$2--$3
build--$1--$2--$3: $(patsubst %,build--%--$2--$3,$(dep[$1]))
	$(cmd_pfx)$(MAKE) -C $(dir $1) -f $(baga_dir)/build.gmk baga_project=$(notdir $1) cfg=$2 baga_builder=$3 tmp_root=$(abspath $(tmp_root)) out_root=$(abspath $(out_root)) $(and $(verbose),verbose=$(verbose)) $(and $(hide_cmds),hide_cmds=$(hide_cmds))

clean--$1--$2--$3:
	$(cmd_pfx)$(MAKE) --no-print-directory -C $(dir $1) -f $(baga_dir)/build.gmk baga_project=$(notdir $1) cfg=$2 baga_builder=$3 tmp_root=$(abspath $(tmp_root)) out_root=$(abspath $(out_root)) clean


endef

missing_dep_prj_list := $(sort $(filter-out $(prj_path_list),$(foreach p,$(prj_path_list),$(dep[$p]))))
$(and $(verbose),$(info missing_dep_prj_list: $(missing_dep_prj_list)))

$(eval $(foreach p,$(missing_dep_prj_list),$(foreach c,$(cfg_list),$(foreach b,$(bld_path_list),$(call fake_dep_targets,$p,$c,$b)))))
$(eval $(foreach p,$(prj_path_list),$(foreach c,$(cfg_list),$(foreach b,$(bld_path_list),$(call build_project,$p,$c,$b)))))
#$(and $(verbose),$(info $(foreach p,$(prj_path_list),$(foreach c,$(cfg_list),$(foreach b,$(bld_path_list),$(call build_project,$p,$c,$b))))))
#$(and $(verbose),$(info build: $(foreach p,$(prj_path_list),$(foreach c,$(cfg_list),$(foreach b,$(bld_path_list),build--$p--$c--$b)))))

build: $(foreach p,$(prj_path_list),$(foreach c,$(cfg_list),$(foreach b,$(bld_path_list),build--$p--$c--$b)))
	@echo build done

clean: $(foreach p,$(prj_path_list),$(foreach c,$(cfg_list),$(foreach b,$(bld_path_list),clean--$p--$c--$b)))
	@echo cleaned

cleanall:
	-rm -rf $(out_root) $(tmp_root)
	@echo everything cleaned


# vim: set ft=make :
